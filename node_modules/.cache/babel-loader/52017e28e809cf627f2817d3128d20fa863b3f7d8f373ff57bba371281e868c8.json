{"ast":null,"code":"var _jsxFileName = \"/Users/nikitaasaulak/Desktop/\\u041D\\u043E\\u0432\\u0430\\u044F \\u043F\\u0430\\u043F\\u043A\\u0430/simple-hotels-search/src/components/UnfavouriteHotelsList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Unfavourite_item from \"./Unfavourite_item\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UnfavouriteHotelsList = ({\n  choosedLocation,\n  choosedDate,\n  countOfDays,\n  favHotels,\n  setFavHotels\n}) => {\n  _s();\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [hotels, setHotels] = useState([]);\n  useEffect(() => {\n    fetch(`https://engine.hotellook.com/api/v2/lookup.json?query=${choosedLocation}&lang=ru&lookFor=hotel&limit=10`).then(res => res.json()).then(result => {\n      setIsLoaded(true);\n      setHotels(result.results.hotels);\n    }, error => {\n      setIsLoaded(true);\n      setHotels(error);\n      console.log(error);\n    });\n  }, [choosedLocation]);\n  const unfavToFav = id => {\n    for (let i = 0; i < hotels.length; i++) {\n      if (hotels[i].id === id) {\n        if (favHotels.includes(hotels[i]) === true) {\n          break;\n        } else {\n          setFavHotels([hotels[i], ...favHotels]);\n        }\n      }\n    }\n  };\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"second-column__hotels-list\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \", error.message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this);\n  } else if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"second-column__hotels-list\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this);\n  } else if (choosedLocation) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"second-column__hotels-list\",\n      children: hotels.map(hotel => /*#__PURE__*/_jsxDEV(Unfavourite_item, {\n        unfavToFav: unfavToFav,\n        hotel: hotel,\n        name: hotel.label,\n        choosedDate: choosedDate,\n        countOfDays: countOfDays\n      }, hotel.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this);\n  }\n};\n_s(UnfavouriteHotelsList, \"VJ8JGvRPFFjXaUXvcOh3klKkPk8=\");\n_c = UnfavouriteHotelsList;\nexport default UnfavouriteHotelsList;\nvar _c;\n$RefreshReg$(_c, \"UnfavouriteHotelsList\");","map":{"version":3,"names":["React","useState","useEffect","Unfavourite_item","jsxDEV","_jsxDEV","UnfavouriteHotelsList","choosedLocation","choosedDate","countOfDays","favHotels","setFavHotels","_s","error","setError","isLoaded","setIsLoaded","hotels","setHotels","fetch","then","res","json","result","results","console","log","unfavToFav","id","i","length","includes","className","children","message","fileName","_jsxFileName","lineNumber","columnNumber","map","hotel","name","label","_c","$RefreshReg$"],"sources":["/Users/nikitaasaulak/Desktop/Новая папка/simple-hotels-search/src/components/UnfavouriteHotelsList.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Unfavourite_item from \"./Unfavourite_item\";\n\nconst UnfavouriteHotelsList = ({ choosedLocation, choosedDate, countOfDays, favHotels, setFavHotels }) => {\n    const [error, setError] = useState(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [hotels, setHotels] = useState([]);\n    \n    useEffect(() => {\n        fetch(`https://engine.hotellook.com/api/v2/lookup.json?query=${choosedLocation}&lang=ru&lookFor=hotel&limit=10`)\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    setIsLoaded(true);\n                    setHotels(result.results.hotels);\n                },\n                (error) => {\n                    setIsLoaded(true);\n                    setHotels(error);\n                    console.log(error)\n                }\n            )\n    }, [choosedLocation])\n\n    const unfavToFav = (id) => {\n        for (let i = 0; i < hotels.length; i++) {\n            if (hotels[i].id === id) {\n                if (favHotels.includes(hotels[i]) === true) {\n                    break\n                } else {\n                    setFavHotels([hotels[i], ...favHotels])\n                }\n            }\n        }\n    }\n    if (error) {\n        return (\n            <div className=\"second-column__hotels-list\">\n                <div>\n                    Ошибка: {error.message}\n                </div>\n            </div>\n        )\n    } else if (!isLoaded) {\n        return (\n            <div className=\"second-column__hotels-list\">\n                <div>Загрузка...</div>\n            </div>\n        )\n    } else if (choosedLocation) {\n        return (\n            <div className=\"second-column__hotels-list\">\n                {hotels.map(hotel => (\n                    <Unfavourite_item unfavToFav={unfavToFav} hotel={hotel} name={hotel.label} key={hotel.id} choosedDate={choosedDate} countOfDays={countOfDays} />\n                ))}\n            </div>\n        );\n    }\n}\n\nexport default UnfavouriteHotelsList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}